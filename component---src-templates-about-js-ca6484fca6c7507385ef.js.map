{"version":3,"sources":["webpack:///./src/templates/about.js","webpack:///./src/components/header.js","webpack:///./src/components/pageIntroduction.js"],"names":["AboutRowLink","linkText","linkUrl","culture","url","useUrl","to","className","AboutRow","page","currentPage","pageInCulture","image","desktop","medium","small","tablet","imageRight","imageClass","contentClass","media","srcSet","src","alt","altText","aboveTitle","title","underlineWhite","dangerouslySetInnerHTML","__html","lead","AboutPage","data","pageContext","currentCulture","about","rows","allAboutRow","edges","map","e","node","currentPageId","umbracoId","seo","r","key","Header","mobile","largeDesktop","parseHeaderImage","defaultProps","PageIntroduction","id"],"mappings":"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","file":"component---src-templates-about-js-ca6484fca6c7507385ef.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Header from \"../components/header\"\nimport underlineWhite from \"../images/underline-white.png\"\nimport { pageInCulture, useUrl } from \"../selectors\"\nimport PageIntroduction from \"../components/pageIntroduction\"\n\nconst AboutRowLink = ({ linkText, linkUrl, culture }) => {\n  const url = useUrl(culture, linkUrl)\n\n  return (\n    <Link to={url} className=\"btn-cnc\">\n      {linkText}\n      <span className=\"corner\" />\n      <span className=\"inner-corner\" />\n    </Link>\n  )\n}\n\nconst AboutRow = ({ culture, page }) => {\n  const currentPage = pageInCulture(culture, page)\n  const { desktop, medium, small, tablet } = currentPage.image\n  const [imageClass, contentClass] = currentPage.imageRight\n    ? [\"order-md-1\", \"order-md-0\"]\n    : [\"order-md-0\", \"order-md-1\"]\n\n  return (\n    <section>\n      <div className=\"container-md p-0\">\n        <div className=\"row no-gutters about-row\">\n          <div className={`col-12 col-md-6 ${imageClass}`}>\n            <picture>\n              <source media=\"(min-width: 75em)\" srcSet={desktop} />\n              <source media=\"(min-width: 62em)\" srcSet={tablet} />\n              <source media=\"(min-width: 48em)\" srcSet={tablet} />\n              <source media=\"(min-width: 34em)\" srcSet={medium} />\n              <img\n                className=\"w-100\"\n                src={small}\n                srcSet={small}\n                alt={currentPage.altText}\n              />\n            </picture>\n          </div>\n          <div className={`col-12 col-md-6 ${contentClass}`}>\n            <div className=\"container content\">\n              {currentPage.aboveTitle && (\n                <h3 className=\"above\">{currentPage.aboveTitle}</h3>\n              )}\n              <h2>{currentPage.title}</h2>\n              <img\n                src={underlineWhite}\n                alt={\"underline-bar\"}\n                className=\"underline-bar\"\n              />\n              <div dangerouslySetInnerHTML={{ __html: currentPage.lead }}></div>\n              {currentPage.linkText && (\n                <AboutRowLink {...currentPage} culture={culture} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nconst AboutPage = ({ data, pageContext }) => {\n  const currentCulture = pageContext.culture\n  const about = pageInCulture(currentCulture, data.about)\n  const rows = data.allAboutRow.edges.map(e => e.node)\n\n  return (\n    <Layout\n      culture={currentCulture}\n      currentPageId={pageContext.umbracoId}\n      seo={pageContext.seo}\n    >\n      <Header currentPage={about} />\n      <PageIntroduction {...about} />\n      {rows.map(r => (\n        <AboutRow page={r} culture={currentCulture} key={r.key} />\n      ))}\n    </Layout>\n  )\n}\nexport default AboutPage;\n\n\nexport const query = graphql`\n  query getAboutPage($umbracoId: Int){\n    about(umbracoId: { eq: $umbracoId }) {\n      headerImage {\n        nl {\n          mobile\n          tablet\n          desktop\n          large_desktop\n        }\n        en {\n          mobile\n          tablet\n          desktop\n          large_desktop\n        }\n        fr {\n          mobile\n          tablet\n          desktop\n          large_desktop\n        }\n      }\n      headerImageAlt {\n        en\n        nl\n        fr\n      }\n      aboveTitle {\n        en\n        nl\n        fr\n      }\n      title {\n        en\n        nl\n        fr\n      }\n      lead {\n        en\n        nl\n        fr\n      }\n    }\n    allAboutRow(filter: { parentUmbracoId: { eq: $umbracoId } }) {\n      edges {\n        node {\n          key: id\n          name\n          image {\n            nl {\n              desktop\n              medium\n              small\n              tablet\n            }\n            en {\n              desktop\n              medium\n              small\n              tablet\n            }\n            fr {\n              desktop\n              medium\n              small\n              tablet\n            }\n          }\n          imageRight {\n            en\n            nl\n            fr\n          }\n          title {\n            en\n            nl\n            fr\n          }\n          aboveTitle {\n            en\n            nl\n            fr\n          }\n          lead {\n            en\n            nl\n            fr\n          }\n          linkText {\n            en\n            nl\n            fr\n          }\n          linkUrl {\n            en\n            nl\n            fr\n          }\n          altText {\n            en\n            nl\n            fr\n          }\n        }\n      }\n    }\n  }\n`\n","import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nfunction parseHeaderImage(currentPage) {\n  return {\n    mobile: currentPage[\"headerImage\"][\"mobile\"],\n    tablet: currentPage[\"headerImage\"][\"tablet\"],\n    desktop: currentPage[\"headerImage\"][\"desktop\"],\n    largeDesktop: currentPage[\"headerImage\"][\"large_desktop\"],\n    alt: currentPage[\"headerImage\"][\"headerImageAlt\"],\n  }\n}\n\nconst Header = ({ currentPage }) => {\n  const { alt, mobile, tablet, desktop, largeDesktop } = parseHeaderImage(\n    currentPage\n  )\n  return (\n    <header>\n      <picture>\n        <source media=\"(min-width: 75em)\" srcSet={largeDesktop} />\n        <source media=\"(min-width: 62em)\" srcSet={desktop} />\n        <source media=\"(min-width: 48em)\" srcSet={tablet} />\n        <source media=\"(min-width: 34em)\" srcSet={mobile} />\n        <img src={mobile} srcSet={mobile} alt={alt} />\n      </picture>\n      <div className=\"edge-container\">\n        <div className=\"edge white\" />\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  currentPage: PropTypes.shape({\n    headerImage: PropTypes.shape({\n      mobile: PropTypes.string,\n      tablet: PropTypes.string,\n      desktop: PropTypes.string,\n      \"large-desktop\": PropTypes.string,\n    }),\n    headerImageAlt: PropTypes.string,\n  }),\n}\n\nHeader.defaultProps = {}\n\nexport default Header\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport underlineWhite from \"../images/underline-white.png\"\n\nconst PageIntroduction = ({ aboveTitle, title, lead }) => {\n  return (\n    <section>\n      <div className=\"container\">\n        <div className=\"text-center mt-5 mb-2\">\n          <h2 className=\"above text-lowercase\">{aboveTitle}</h2>\n          <div className=\"title-container\">\n            <h1 className=\"mb-0\">{title}</h1>\n            <img src={underlineWhite} alt={\"\"} className=\"underline-bar\" />\n            <div\n              className=\"text-left\"\n              id=\"lead\"\n              dangerouslySetInnerHTML={{ __html: lead }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nPageIntroduction.propTypes = {\n  aboveTitle: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  lead: PropTypes.string.isRequired,\n}\n\nexport default PageIntroduction\n"],"sourceRoot":""}